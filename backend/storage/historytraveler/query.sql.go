// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package historytraveler

import (
	"context"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
  name, code
) VALUES (
  $1, $2
)
RETURNING id, code, name
`

type CreateCountryParams struct {
	Name string
	Code string
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry, arg.Name, arg.Code)
	var i Country
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}

const getCountries = `-- name: GetCountries :many
SELECT id, code, name FROM countries
`

func (q *Queries) GetCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.ID, &i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryByCode = `-- name: GetCountryByCode :one
SELECT id, code, name FROM countries
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetCountryByCode(ctx context.Context, code string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByCode, code)
	var i Country
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}
