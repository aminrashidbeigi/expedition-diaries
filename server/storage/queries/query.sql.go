// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package queries

import (
	"context"
	"database/sql"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (
  name, code
) VALUES (
  $1, $2
)
RETURNING id, code, name
`

type CreateCountryParams struct {
	Name string
	Code string
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry, arg.Name, arg.Code)
	var i Country
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}

const createResource = `-- name: CreateResource :one
INSERT INTO resources (
  title, link, image, language, type
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, link, image, language, type
`

type CreateResourceParams struct {
	Title    string
	Link     string
	Image    string
	Language sql.NullString
	Type     sql.NullString
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, createResource,
		arg.Title,
		arg.Link,
		arg.Image,
		arg.Language,
		arg.Type,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Link,
		&i.Image,
		&i.Language,
		&i.Type,
	)
	return i, err
}

const createTravel = `-- name: CreateTravel :one
INSERT INTO travels (
  title, description, started_at, ended_at, route, slug
) VALUES (
  $1, $2, $3, $4, $5, $6
) 
ON CONFLICT DO NOTHING RETURNING id, title, started_at, ended_at, route, slug, description
`

type CreateTravelParams struct {
	Title       string
	Description sql.NullString
	StartedAt   string
	EndedAt     string
	Route       sql.NullString
	Slug        sql.NullString
}

func (q *Queries) CreateTravel(ctx context.Context, arg CreateTravelParams) (Travel, error) {
	row := q.db.QueryRowContext(ctx, createTravel,
		arg.Title,
		arg.Description,
		arg.StartedAt,
		arg.EndedAt,
		arg.Route,
		arg.Slug,
	)
	var i Travel
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartedAt,
		&i.EndedAt,
		&i.Route,
		&i.Slug,
		&i.Description,
	)
	return i, err
}

const createTravelCountry = `-- name: CreateTravelCountry :one
INSERT INTO travel_countries (
  travel_id, country_id
) VALUES (
  $1, $2
) 
ON CONFLICT DO NOTHING RETURNING travel_id, country_id
`

type CreateTravelCountryParams struct {
	TravelID  int32
	CountryID int32
}

func (q *Queries) CreateTravelCountry(ctx context.Context, arg CreateTravelCountryParams) (TravelCountry, error) {
	row := q.db.QueryRowContext(ctx, createTravelCountry, arg.TravelID, arg.CountryID)
	var i TravelCountry
	err := row.Scan(&i.TravelID, &i.CountryID)
	return i, err
}

const createTravelResource = `-- name: CreateTravelResource :one
INSERT INTO travel_resources (
  travel_id, resource_id
) VALUES (
  $1, $2
)
ON CONFLICT DO NOTHING RETURNING travel_id, resource_id
`

type CreateTravelResourceParams struct {
	TravelID   int32
	ResourceID int32
}

func (q *Queries) CreateTravelResource(ctx context.Context, arg CreateTravelResourceParams) (TravelResource, error) {
	row := q.db.QueryRowContext(ctx, createTravelResource, arg.TravelID, arg.ResourceID)
	var i TravelResource
	err := row.Scan(&i.TravelID, &i.ResourceID)
	return i, err
}

const createTravelTraveler = `-- name: CreateTravelTraveler :one
INSERT INTO travel_travelers (
  travel_id, traveler_id
) VALUES (
  $1, $2
) 
ON CONFLICT DO NOTHING RETURNING travel_id, traveler_id
`

type CreateTravelTravelerParams struct {
	TravelID   int32
	TravelerID int32
}

func (q *Queries) CreateTravelTraveler(ctx context.Context, arg CreateTravelTravelerParams) (TravelTraveler, error) {
	row := q.db.QueryRowContext(ctx, createTravelTraveler, arg.TravelID, arg.TravelerID)
	var i TravelTraveler
	err := row.Scan(&i.TravelID, &i.TravelerID)
	return i, err
}

const createTraveler = `-- name: CreateTraveler :one
INSERT INTO travelers (
  name, link, image, nationality, slug
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, name, link, image, nationality, slug
`

type CreateTravelerParams struct {
	Name        string
	Link        string
	Image       sql.NullString
	Nationality sql.NullString
	Slug        sql.NullString
}

func (q *Queries) CreateTraveler(ctx context.Context, arg CreateTravelerParams) (Traveler, error) {
	row := q.db.QueryRowContext(ctx, createTraveler,
		arg.Name,
		arg.Link,
		arg.Image,
		arg.Nationality,
		arg.Slug,
	)
	var i Traveler
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Image,
		&i.Nationality,
		&i.Slug,
	)
	return i, err
}

const getCountries = `-- name: GetCountries :many
SELECT id, code, name FROM countries
`

func (q *Queries) GetCountries(ctx context.Context) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, getCountries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.ID, &i.Code, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountriesByTravelID = `-- name: GetCountriesByTravelID :many
SELECT countries.id, code, name, travel_id, country_id, travels.id, title, started_at, ended_at, route, slug, description FROM countries
INNER JOIN travel_countries on countries.id = travel_countries.country_id
INNER JOIN travels on travel_countries.travel_id = travels.id
WHERE travels.id = $1
`

type GetCountriesByTravelIDRow struct {
	ID          int32
	Code        string
	Name        string
	TravelID    int32
	CountryID   int32
	ID_2        int32
	Title       string
	StartedAt   string
	EndedAt     string
	Route       sql.NullString
	Slug        sql.NullString
	Description sql.NullString
}

func (q *Queries) GetCountriesByTravelID(ctx context.Context, id int32) ([]GetCountriesByTravelIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getCountriesByTravelID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCountriesByTravelIDRow
	for rows.Next() {
		var i GetCountriesByTravelIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.TravelID,
			&i.CountryID,
			&i.ID_2,
			&i.Title,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountryByCode = `-- name: GetCountryByCode :one
SELECT id, code, name FROM countries
WHERE code = $1 LIMIT 1
`

func (q *Queries) GetCountryByCode(ctx context.Context, code string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountryByCode, code)
	var i Country
	err := row.Scan(&i.ID, &i.Code, &i.Name)
	return i, err
}

const getResourcesByTravelID = `-- name: GetResourcesByTravelID :many
SELECT resources.id, resources.title, link, image, language, type, travel_id, resource_id, travels.id, travels.title, started_at, ended_at, route, slug, description FROM resources
INNER JOIN travel_resources on travel_resources.resource_id = resources.id
INNER JOIN travels on travels.id = travel_resources.travel_id
WHERE travels.id = $1
`

type GetResourcesByTravelIDRow struct {
	ID          int32
	Title       string
	Link        string
	Image       string
	Language    sql.NullString
	Type        sql.NullString
	TravelID    int32
	ResourceID  int32
	ID_2        int32
	Title_2     string
	StartedAt   string
	EndedAt     string
	Route       sql.NullString
	Slug        sql.NullString
	Description sql.NullString
}

func (q *Queries) GetResourcesByTravelID(ctx context.Context, id int32) ([]GetResourcesByTravelIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getResourcesByTravelID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResourcesByTravelIDRow
	for rows.Next() {
		var i GetResourcesByTravelIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Link,
			&i.Image,
			&i.Language,
			&i.Type,
			&i.TravelID,
			&i.ResourceID,
			&i.ID_2,
			&i.Title_2,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelBySlug = `-- name: GetTravelBySlug :many
SELECT id, title, started_at, ended_at, route, slug, description FROM travels WHERE slug=$1 LIMIT 1
`

func (q *Queries) GetTravelBySlug(ctx context.Context, slug sql.NullString) ([]Travel, error) {
	rows, err := q.db.QueryContext(ctx, getTravelBySlug, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Travel
	for rows.Next() {
		var i Travel
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelByTitle = `-- name: GetTravelByTitle :one
SELECT id, title, started_at, ended_at, route, slug, description FROM travels
WHERE title = $1 LIMIT 1
`

func (q *Queries) GetTravelByTitle(ctx context.Context, title string) (Travel, error) {
	row := q.db.QueryRowContext(ctx, getTravelByTitle, title)
	var i Travel
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.StartedAt,
		&i.EndedAt,
		&i.Route,
		&i.Slug,
		&i.Description,
	)
	return i, err
}

const getTravelerBySlug = `-- name: GetTravelerBySlug :one
SELECT id, name, link, image, nationality, slug FROM travelers WHERE slug = $1::text LIMIT 1
`

func (q *Queries) GetTravelerBySlug(ctx context.Context, slug string) (Traveler, error) {
	row := q.db.QueryRowContext(ctx, getTravelerBySlug, slug)
	var i Traveler
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Link,
		&i.Image,
		&i.Nationality,
		&i.Slug,
	)
	return i, err
}

const getTravelers = `-- name: GetTravelers :many
SELECT id, name, link, image, nationality, slug FROM travelers ORDER BY id DESC
`

func (q *Queries) GetTravelers(ctx context.Context) ([]Traveler, error) {
	rows, err := q.db.QueryContext(ctx, getTravelers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Traveler
	for rows.Next() {
		var i Traveler
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.Image,
			&i.Nationality,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelersByTravelID = `-- name: GetTravelersByTravelID :many
SELECT travelers.id, name, link, image, nationality, travelers.slug, travel_id, traveler_id, travels.id, title, started_at, ended_at, route, travels.slug, description FROM travelers
INNER JOIN travel_travelers on travelers.id = travel_travelers.traveler_id
INNER JOIN travels on travel_travelers.travel_id = travels.id
WHERE travels.id = $1
`

type GetTravelersByTravelIDRow struct {
	ID          int32
	Name        string
	Link        string
	Image       sql.NullString
	Nationality sql.NullString
	Slug        sql.NullString
	TravelID    int32
	TravelerID  int32
	ID_2        int32
	Title       string
	StartedAt   string
	EndedAt     string
	Route       sql.NullString
	Slug_2      sql.NullString
	Description sql.NullString
}

func (q *Queries) GetTravelersByTravelID(ctx context.Context, id int32) ([]GetTravelersByTravelIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTravelersByTravelID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTravelersByTravelIDRow
	for rows.Next() {
		var i GetTravelersByTravelIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Link,
			&i.Image,
			&i.Nationality,
			&i.Slug,
			&i.TravelID,
			&i.TravelerID,
			&i.ID_2,
			&i.Title,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug_2,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravels = `-- name: GetTravels :many
SELECT id, title, started_at, ended_at, route, slug, description FROM travels ORDER BY id DESC LIMIT $1 OFFSET $2
`

type GetTravelsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetTravels(ctx context.Context, arg GetTravelsParams) ([]Travel, error) {
	rows, err := q.db.QueryContext(ctx, getTravels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Travel
	for rows.Next() {
		var i Travel
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravelsByTravelerSlug = `-- name: GetTravelsByTravelerSlug :many
SELECT travels.id, title, started_at, ended_at, route, travels.slug, description, travel_id, traveler_id, travelers.id, name, link, image, nationality, travelers.slug FROM travels
INNER JOIN travel_travelers on travels.id = travel_travelers.travel_id
INNER JOIN travelers on travel_travelers.traveler_id = travelers.id
WHERE travelers.slug = $1::text
ORDER BY travels.id DESC
`

type GetTravelsByTravelerSlugRow struct {
	ID          int32
	Title       string
	StartedAt   string
	EndedAt     string
	Route       sql.NullString
	Slug        sql.NullString
	Description sql.NullString
	TravelID    int32
	TravelerID  int32
	ID_2        int32
	Name        string
	Link        string
	Image       sql.NullString
	Nationality sql.NullString
	Slug_2      sql.NullString
}

func (q *Queries) GetTravelsByTravelerSlug(ctx context.Context, slug string) ([]GetTravelsByTravelerSlugRow, error) {
	rows, err := q.db.QueryContext(ctx, getTravelsByTravelerSlug, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTravelsByTravelerSlugRow
	for rows.Next() {
		var i GetTravelsByTravelerSlugRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug,
			&i.Description,
			&i.TravelID,
			&i.TravelerID,
			&i.ID_2,
			&i.Name,
			&i.Link,
			&i.Image,
			&i.Nationality,
			&i.Slug_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTravlesByCountryCode = `-- name: GetTravlesByCountryCode :many
SELECT travels.id, title, started_at, ended_at, route, slug, description, travel_id, country_id, countries.id, code, name FROM travels
INNER JOIN travel_countries on travels.id = travel_countries.travel_id
INNER JOIN countries on travel_countries.country_id = countries.id
WHERE countries.code = $1
ORDER BY travels.id DESC
`

type GetTravlesByCountryCodeRow struct {
	ID          int32
	Title       string
	StartedAt   string
	EndedAt     string
	Route       sql.NullString
	Slug        sql.NullString
	Description sql.NullString
	TravelID    int32
	CountryID   int32
	ID_2        int32
	Code        string
	Name        string
}

func (q *Queries) GetTravlesByCountryCode(ctx context.Context, code string) ([]GetTravlesByCountryCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getTravlesByCountryCode, code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTravlesByCountryCodeRow
	for rows.Next() {
		var i GetTravlesByCountryCodeRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.StartedAt,
			&i.EndedAt,
			&i.Route,
			&i.Slug,
			&i.Description,
			&i.TravelID,
			&i.CountryID,
			&i.ID_2,
			&i.Code,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
